-- Active: 1692991137235@@127.0.0.1@3306@giraffe
CREATE TABLE employee (
    emp_id INT PRIMARY KEY,
    first_name VARCHAR(40),
    last_name VARCHAR(40),
    birth_day DATE, #yyyy-MM-dd
    sex VARCHAR(1),
    salary INT,
    super_id INT, #foreign key
    branch_id INT #foreign key
);

CREATE TABLE branch (
    branch_id INT PRIMARY KEY,
    branch_name VARCHAR(40),
    mgr_id INT,
    mgr_start_date DATE,
    Foreign Key(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);

ALTER TABLE employee
ADD FOREIGN KEY(branch_id)
REFERENCES branch(branch_id)
on DELETE SET NULL;

ALTER Table employee
ADD FOREIGN KEY(super_id)
REFERENCES employee(emp_id)
on DELETE SET NULL;

CREATE Table client (
    client_id INT PRIMARY KEY,
    client_name VARCHAR(40),
    branch_id INT,
    Foreign Key (branch_id) REFERENCES branch(branch_id) on DELETE SET NULL
);

CREATE Table works_with(
    emp_id INT,
    client_id INT,
    total_sales INT,
    PRIMARY KEY (emp_id, client_id),
    Foreign Key (emp_id) REFERENCES employee(emp_id) on DELETE CASCADE,
    Foreign Key (client_id) REFERENCES client(client_id) on DELETE CASCADE
)

CREATE Table branch_supplier (
    branch_id INT,
    supplier_name VARCHAR(40),
    supply_type VARCHAR(40),
    PRIMARY KEY (branch_id, supplier_name),
    Foreign Key (branch_id) REFERENCES branch(branch_id) on DELETE CASCADE
);

----------------------------------------------------------------Inserting values
--corporate (branch)
INSERT INTO employee VALUES(100, 'David', 'Wallace', '1967-11-17', 'M', 250000, NULL, NULL);

INSERT INTO branch VALUES(1, 'Corporate', 100, '2006-02-09');

UPDATE employee
SET branch_id = 1
WHERE emp_id = 100;

INSERT INTO employee VALUES(101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1);


-- Scranton
INSERT INTO employee VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 100, NULL);

INSERT INTO branch VALUES(2, 'Scranton', 102, '1992-04-06');

UPDATE employee
SET branch_id = 2
WHERE emp_id = 102;

INSERT INTO employee VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);
INSERT INTO employee VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);
INSERT INTO employee VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);

-- Stamford
INSERT INTO employee VALUES(106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);

INSERT INTO branch VALUES(3, 'Stamford', 106, '1998-02-13');

UPDATE employee 
set branch_id = 3
WHERE emp_id = 106;

INSERT INTO employee VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employee VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);


-- Branch Supplier
INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES(3, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3, 'Stamford Labels', 'Custom Forms');

DELETE FROM branch_supplier WHERE supplier_name = 'Stamford Lables';

-- CLIENT
INSERT INTO client VALUES(400, 'Dunmore Highschool', 2);
INSERT INTO client VALUES(401, 'Lackawana Country', 2);
INSERT INTO client VALUES(402, 'FedEx', 3);
INSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);
INSERT INTO client VALUES(404, 'Scranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406, 'FedEx', 2);

-- WORKS_WITH
INSERT INTO works_with VALUES(105, 400, 55000);
INSERT INTO works_with VALUES(102, 401, 267000);
INSERT INTO works_with VALUES(108, 402, 22500);
INSERT INTO works_with VALUES(107, 403, 5000);
INSERT INTO works_with VALUES(108, 403, 12000);
INSERT INTO works_with VALUES(105, 404, 33000);
INSERT INTO works_with VALUES(107, 405, 26000);
INSERT INTO works_with VALUES(102, 406, 15000);
INSERT INTO works_with VALUES(105, 406, 130000);

--------------------------------------------------------------------------------------------------------------------------------

--find out first_five rows
SELECT * 
from employee
LIMIT 5;

--find out forename and surname
SELECT first_name as forename, last_name as surname
FROM employee;

--find out all the different ATTRIBUTE
SELECT DISTINCT branch_id
FROM employee; 
--------------------------------------------------------------------------------------------------------------------------------
--Function
SELECT COUNT (emp_id)
FROM employee;

SELECT COUNT (emp_id)
FROM employee
WHERE sex = 'F' AND birth_day > '1970-01-01';

SELECT AVG (salary)
FROM employee
WHERE sex = 'M';

SELECT SUM (salary)
FROM employee;

--Group by, find out how many male and female employees are there
SELECT COUNT (sex), sex
FROM employee
GROUP BY sex;

SELECT SUM (total_sales), client_id 
FROM works_with
GROUP BY client_id;

--------------------------------------------------------------------------------------------------------------------------------
--Wildcard
-- % = any # characters, _ = one character
SELECT *
FROM client
WHERE client_name LIKE '%LLC';

SELECT *
FROM branch_supplier
WHERE supplier_name LIKE '%Label%';

-- _ means only one character
-- find out all employees who's birth day is on OCT
--the format of birth day = ____-__-__
SELECT *
FROM employee
WHERE birth_day LIKE '____-10%';

SELECT *
FROM client
WHERE client_name LIKE '%school%';

--------------------------------------------------------------------------------------------------------------------------------
--Union (combine, make a list), they have to have same # of columns and similar data types
SELECT first_name
FROM employee
UNION
SELECT branch_name
FROM branch;


SELECT client_name, client.branch_id
FROM client
UNION
SELECT supplier_name, branch_supplier.branch_id
FROM branch_supplier;

--find a list of all money spent or erned (adding money)
SELECT salary
FROM employee
UNION
SELECT total_sales
FROM works_with;

--Join (create a new table by combining rows from two different tables)
INSERT into branch VALUES(4, 'Buffalo', null, null)

--Inner join (obtain rows meeting the condition)
SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee 
JOIN branch
ON employee.emp_id = branch.mgr_id;
--left join (get all the rows from left table)
SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
LEFT JOIN branch
ON employee.emp_id = branch.mgr_id;
--right join (get all the rows from right table)
SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
RIGHT JOIN branch
ON employee.emp_id = branch.mgr_id;

--------------------------------------------------------------------------------------------------------------------------------
--Nested Queries(중첩)
# works_with table has total_sales and emp_id but emp_name is not included
# therefore i used IN to see wheather emp_id is in works_with or not.
# IN gives us a result if the emp_id is in value we specify inside of the next ().
SELECT employee.first_name, employee.last_name
from employee
WHERE employee.emp_id IN (
    SELECT emp_id
    FROM works_with
    WHERE total_sales > 30000
);

-- Find all clients who are handled by the branch that Michel Scott manages
# '=' gives us a result only equal values with inside of the next ().
SELECT client.client_name
from client
WHERE client.branch_id = (
    SELECT branch.branch_id
    FROM branch
    WHERE mgr_id = 102 #Michel scott's emp_id
);

--------------------------------------------------------------------------------------------------------------------------------
-- ON DELETE NULL, set null when the reference is deleted, can't be used for a primary key
-- ON DELETE CASCADE, completely remove 

--------------------------------------------------------------------------------------------------------------------------------
--Triggers
#Delimiter = 구분기호. in SQL, DELIMITER = ';'
#If i set DELIMITER to $, then 구분기호 = $
CREATE TABLE trigger_test (
    message VARCHAR(100)
);
DELIMITER $$
CREATE
    TRIGGER my_trriger1 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUES('added new employee');
    END$$
DELIMITER ;

INSERT INTO employee VALUES(109, 'Oscar', 'Martinez', '1968-02-19', 'M', 69000, 106, 3);

SELECT * FROM trigger_test;


DELIMITER $$
CREATE
    TRIGGER my_trriger2 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        IF NEW.sex = 'M' THEN
            INSERT INTO trigger_test VALUES('added male employee');
        ELSEIF NEW.sex = 'F' THEN
            INSERT INTO trigger_test VALUES('added female employee');
        ELSE
            INSERT INTO trigger_test VALUES('added other employee');
        END IF;        
    END$$
DELIMITER ;

INSERT INTO employee VALUES(110, 'Pam', 'Beezly', '1988-02-19', 'F', 69000, 106, 3);

SELECT * FROM trigger_test;
